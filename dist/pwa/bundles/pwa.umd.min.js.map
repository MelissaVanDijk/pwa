{"version":3,"sources":["ng://pwa/components/widgetbase.component.ts","ng://pwa/pwa.module.ts","ng://pwa/models/call.ts","ng://pwa/models/contact.ts"],"names":["WidgetBaseComponent","_this","this","console","log","window","addEventListener","handleMessage","event","attachEvent","prototype","origin","data","source","method","payload","onSelectContact","onSelectVoiceCall","contact","Component","args","selector","template","PwaModule","NgModule","imports","declarations","exports","Incoming","Outgoing","Idle","Connected","Hold","Dialing","Disconnected","Personal","Company"],"mappings":"iPAAA,IAAAA,EAAA,WAeI,SAAAA,IAAA,IAAAC,EAAAC,eAFc,aAIVC,QAAQC,IAAI,2BACRC,OAAOC,kBACPD,OAAOC,iBAAiB,UAAW,WAAM,OAAAL,EAAKM,cAAcC,SAAQ,GACpEL,QAAQC,IAAI,6BAKZ,OAAcK,YAAY,UAAW,WAAM,OAAAR,EAAKM,cAAcC,SAC9DL,QAAQC,KAAI,EAAO,sCAI3BJ,EAAAU,UAAAH,cAAA,SAAeC,GACX,GAAqB,0BAAjBA,EAAMG,QAAuD,0BAAjBH,EAAMG,OAAtD,CAKAR,QAAQC,IAAK,aAAcI,EAAMI,MACjCT,QAAQC,IAAK,eAAgBI,EAAMG,QACnCR,QAAQC,IAAK,eAAgBI,EAAMK,QAEnC,IAAMC,EAASN,EAAMI,KAAKE,OAASN,EAAMI,KAAKE,OAAS,GACjDC,EAAUP,EAAMI,KAAKG,QAAUP,EAAMI,KAAKG,QAAU,GAE1D,GAAe,KAAXD,GAA6B,KAAZC,EAYrB,OAJAZ,QAAQC,IAAK,mBAAqBU,EAAQC,GAC1CZ,QAAQC,IAAK,OAAQW,GAGbD,GACJ,IAAK,kBACDZ,KAAKc,gBAAgBD,GACrB,MACJ,IAAK,oBACDb,KAAKe,kBAAkBF,GACvB,MACJ,QACIZ,QAAQC,IAAK,qCAAsCU,EAAQC,QAnB/DZ,QAAQC,IAAK,2BAA6BU,EAAQC,QAZlDZ,QAAQC,IAAI,qBAAsBI,EAAMG,SAoChDX,EAAAU,UAAAM,gBAAA,SAAgBE,GACZf,QAAQC,IAAK,oBAAqBc,IAGtClB,EAAAU,UAAAO,kBAAA,SAAkBC,GACdf,QAAQC,IAAK,oBAAqBc,wBAlEzCC,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,iBACVC,SAAU,oEATd,GCAAC,EAAA,oDAGCC,EAAAA,SAAQJ,KAAA,CAAC,CACRK,QAAS,GAGTC,aAAc,CACZ1B,GAEF2B,QAAS,CACP3B,SAXJ,MC4DI4B,SAAA,EACAC,SAAA,OADAD,UAAQ,eACRC,UAAQ,kBAIRC,KAAA,EACAF,SAAA,EACAG,UAAA,EACAC,KAAA,EACAC,QAAA,EACAC,aAAA,OALAJ,MAAI,WACJF,UAAQ,eACRG,WAAS,gBACTC,MAAI,WACJC,SAAO,cACPC,cAAY,sBCzCZC,SAAA,EACAC,QAAA,OADAD,UAAQ,eACRC,SAAO","sourcesContent":["import { Component } from '@angular/core';\r\nimport { IContact } from '../models/contact';\r\nimport { IVoiceCall } from '../models/call';\r\n\r\n\r\n\r\n\r\n@Component({\r\n    selector: 'pwa-widgetbase',\r\n    template: '<div>WIDGETBASE</div>'\r\n  })\r\nexport class WidgetBaseComponent {\r\n\r\n    public name = 'BaseWidget';\r\n\r\n    constructor() {\r\n\r\n        console.log('BaseWidget construction');\r\n        if (window.addEventListener) {\r\n            window.addEventListener('message', () => this.handleMessage(event), false);\r\n            console.log('Event Listener attached');\r\n\r\n        } else {\r\n            // for IE6 - IE10\r\n            // the cast is workaround for typescript not supporting the attachEvent-method\r\n            (<any>window).attachEvent('message', () => this.handleMessage(event));\r\n            console.log(false, 'IE Event Listener attached');\r\n        }\r\n    }\r\n\r\n    handleMessage( event) {\r\n        if (event.origin !== 'http://localhost:4200' && event.origin !== 'http://localhost:5200') {\r\n            console.log('ORIGIN IS NOT GOOD', event.origin);\r\n            return;\r\n        }\r\n\r\n        console.log( 'Event.data', event.data);\r\n        console.log( 'Event.origin', event.origin);\r\n        console.log( 'Event.source', event.source);\r\n\r\n        const method = event.data.method ? event.data.method : '';\r\n        const payload = event.data.payload ? event.data.payload : '';\r\n\r\n        if (method === '' || payload === '') {\r\n            console.log( 'Invalid message received' , method, payload);\r\n            return;\r\n        }\r\n\r\n        //document.getElementById('received-data').innerHTML = 'Message received: ' + method;\r\n        //document.getElementById('payload').innerHTML = JSON.stringify(payload, null, 4);\r\n\r\n        console.log( 'Message received' , method, payload);\r\n        console.log( 'JSON', payload);\r\n\r\n\r\n        switch (method) {\r\n            case 'onSelectContact':\r\n                this.onSelectContact(payload);\r\n                break;\r\n            case 'onSelectVoiceCall':\r\n                this.onSelectVoiceCall(payload);\r\n                break;\r\n            default:\r\n                console.log( 'Invalid method in received message', method, payload);\r\n                break;\r\n        }\r\n    }\r\n\r\n    onSelectContact(contact: IContact) {\r\n        console.log( 'onSelectedContact', contact);\r\n    }\r\n\r\n    onSelectVoiceCall(contact: IVoiceCall) {\r\n        console.log( 'onSelectVoiceCall', contact);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { WidgetBaseComponent } from './components/widgetbase.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n\r\n  ],\r\n  declarations: [\r\n    WidgetBaseComponent\r\n  ],\r\n  exports: [\r\n    WidgetBaseComponent\r\n  ]\r\n})\r\nexport class PwaModule { }\r\n","import { IContact } from './contact';\r\n\r\nexport interface IConversationBase {\r\n    remoteEntry: IContact| null;\r\n    remoteAddress: string;\r\n    fromAddress: string;\r\n    state: CallState;\r\n    id: string;\r\n}\r\n\r\nexport interface IVoiceCall extends IConversationBase {\r\n    modality: 'Voice';\r\n    timeStateChange: Date;\r\n    direction: CallDirection;\r\n    fallback: string;\r\n    callRoute: ICallRouteEntry[];\r\n    toAddress: string;\r\n    originalTo: ICallRouteEntry;\r\n}\r\n\r\nexport interface IChatCall extends IConversationBase {\r\n    modality: 'Chat';\r\n    messages: IChatMessage[];\r\n    duration: number;\r\n    myAddress: string;\r\n    displayName: string;\r\n    pictureUrl: string;\r\n}\r\n\r\nexport interface IMailMessage extends IConversationBase {\r\n    modality: 'Mail';\r\n    timestamp: Date;\r\n    title: string;\r\n    body: string;\r\n    importance: string;\r\n    isDraft: boolean;\r\n    draftId: string;\r\n    claimed: string;\r\n}\r\n\r\nexport type ICall = IVoiceCall | IChatCall | IMailMessage;\r\n\r\nexport interface IChatMessage {\r\n    from: string;\r\n    time: Date;\r\n    message: string;\r\n}\r\n\r\nexport interface ICallRouteEntry {\r\n    fromAddress: string;\r\n    toAddress: string;\r\n    originalTo: string;\r\n    direction: CallDirection;\r\n    originalCalled: IContact;\r\n    from: Date;\r\n    until: Date;\r\n}\r\n\r\n\r\nexport enum CallDirection {\r\n    Incoming = 0,\r\n    Outgoing = 1\r\n}\r\n\r\nexport enum CallState {\r\n    Idle = 0,\r\n    Incoming = 1,\r\n    Connected = 2,\r\n    Hold = 3,\r\n    Dialing = 4,\r\n    Disconnected = 5\r\n}","export interface IContact {\r\n    key: string;\r\n\r\n    idCombined: string;\r\n    initials: string;\r\n    completeName: string;\r\n    firstName: string;\r\n    middleName: string;\r\n    lastName: string;\r\n    id: string;\r\n    companyEmail: string;\r\n    compPrimaryPhone: string;\r\n    compAltPhone: string;\r\n    mobilePhone: string;\r\n    privatePhone: string;\r\n    sipAddress: string;\r\n    telUri: string;\r\n    function: string;\r\n    photo: string;\r\n    contactScope: ContactScope;\r\n\r\n    organization: IOmnidirOrg;\r\n    department: IOmnidirDept;\r\n    building: IOmnidirBuilding;\r\n\r\n    data: IContactData;\r\n}\r\n\r\nexport enum ContactScope {\r\n    Personal ,\r\n    Company\r\n}\r\n\r\nexport interface ICoordinates {\r\n    lat: number;\r\n    lng: number;\r\n}\r\n\r\nexport interface IContactData {\r\n    key: string;\r\n    coordinates: ICoordinates;\r\n}\r\n\r\nexport interface IOmnidirOrg {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\nexport interface IOmnidirDept {\r\n    id: number;\r\n    name: string;\r\n    organizationId: number;\r\n}\r\n\r\nexport interface IOmnidirBuilding {\r\n    id: number;\r\n    name: string;\r\n    organizationId: number;\r\n}\r\n\r\nexport interface IOmnidirColumn {\r\n    id: number;\r\n    name: string;\r\n    translation: string;\r\n}"]}